-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.auth_code_table
(
    user_id integer NOT NULL,
    expiration_date timestamp with time zone NOT NULL,
    created_at timestamp with time zone NOT NULL,
    used boolean NOT NULL,
    request_ip character varying COLLATE pg_catalog."default" NOT NULL,
    code integer NOT NULL,
    CONSTRAINT auth_code_table_pkey PRIMARY KEY (code, user_id, created_at)
);

CREATE TABLE IF NOT EXISTS public.forgot_password_table
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    token character varying COLLATE pg_catalog."default" NOT NULL,
    expiration_date character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT forgot_password_table_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.jwt_revocation
(
    jti text COLLATE pg_catalog."default" NOT NULL,
    revoked_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT jwt_revocation_pkey PRIMARY KEY (jti)
);

CREATE TABLE IF NOT EXISTS public.oauth_accounts
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    provider character varying(50) COLLATE pg_catalog."default" NOT NULL,
    provider_user_id character varying(255) COLLATE pg_catalog."default" NOT NULL,
    access_token text COLLATE pg_catalog."default",
    refresh_token text COLLATE pg_catalog."default",
    token_expires_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT oauth_accounts_pkey PRIMARY KEY (id),
    CONSTRAINT oauth_accounts_provider_provider_user_id_key UNIQUE (provider, provider_user_id)
);

CREATE TABLE IF NOT EXISTS public.user_profile_info
(
    user_id_serial bigint NOT NULL,
    phone_number character varying(20) COLLATE pg_catalog."default",
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    bio text COLLATE pg_catalog."default",
    resume text COLLATE pg_catalog."default",
    growth_score integer NOT NULL DEFAULT 0,
    xp_points integer NOT NULL DEFAULT 0,
    achievements jsonb NOT NULL DEFAULT '[]'::jsonb,
    active_challenge integer,
    challenges_completed integer NOT NULL DEFAULT 0,
    followers_count integer NOT NULL DEFAULT 0,
    following_count integer NOT NULL DEFAULT 0,
    visibility profile_visibility NOT NULL DEFAULT 'public'::profile_visibility,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT profile_info_pkey PRIMARY KEY (user_id_serial)
);

CREATE TABLE IF NOT EXISTS public.users_auth
(
    user_id serial NOT NULL,
    username character varying COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying COLLATE pg_catalog."default" NOT NULL,
    role character varying COLLATE pg_catalog."default",
    email character varying COLLATE pg_catalog."default",
    CONSTRAINT users_auth_pkey PRIMARY KEY (user_id)
);

ALTER TABLE IF EXISTS public.auth_code_table
    ADD CONSTRAINT user_id_fk FOREIGN KEY (user_id)
    REFERENCES public.users_auth (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.forgot_password_table
    ADD CONSTRAINT user_id_fk FOREIGN KEY (user_id)
    REFERENCES public.users_auth (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.oauth_accounts
    ADD CONSTRAINT oauth_accounts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users_auth (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_oauth_user
    ON public.oauth_accounts(user_id);


ALTER TABLE IF EXISTS public.user_profile_info
    ADD CONSTRAINT profile_info_user_id_serial_fkey FOREIGN KEY (user_id_serial)
    REFERENCES public.users_auth (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS profile_info_pkey
    ON public.user_profile_info(user_id_serial);

END;